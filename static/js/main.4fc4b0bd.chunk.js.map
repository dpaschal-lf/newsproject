{"version":3,"sources":["components/NewsArticle/NewsArticle.js","App.js","serviceWorker.js","index.js"],"names":["NewsArticle","props","hideModal","bind","showModal","state","modalShowing","viewed","checkCallback","data","url","className","onClick","this","target","href","rel","alt","title","src","urlToImage","content","description","setState","markCallback","imageURL","style","generateModal","React","Component","App","markArticle","getArticleStatus","prepStorage","undefined","localStorage","articles","JSON","stringify","articleURL","articleData","parse","hasOwnProperty","read","Date","now","console","log","req","Request","fetch","then","response","json","index","key","map","columnPoints","Math","floor","length","dataDividedByThirds","slice","makeArticleColumn","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4fc4b0bd.chunk.js","sourcesContent":["import React from 'react';\nimport './newsarticle.css';\n\nclass NewsArticle extends React.Component{\n    constructor( props ){\n        super( props );\n        this.hideModal = this.hideModal.bind( this );\n        this.showModal = this.showModal.bind( this );\n        this.state = {\n            modalShowing: false,\n            viewed: props.checkCallback( props.data.url )\n        }\n    }\n    generateModal(){\n        return (\n            <div className=\"modalShadow\">\n                <div className=\"modalBody\">\n                    <div className=\"modalClose\" onClick={this.hideModal}>X</div>\n                    <div className=\"modalContent\">\n                        <a target=\"_blank\" href={this.props.data.url} rel=\"noopener noreferrer\">\n                        <img alt={this.props.data.title} className=\"modalImage\" src={this.props.data.urlToImage}/>\n                        { this.props.data.content || this.props.data.description}\n                        </a>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    hideModal(){\n        this.setState({\n            modalShowing: false\n        })\n    }\n    showModal(){\n        this.setState({\n            viewed: true,\n            modalShowing: true\n        })\n        this.props.markCallback( this.props.data.url );\n    }\n    render(){\n        let {title, urlToImage: imageURL} = this.props.data;\n        const style = {\n            'backgroundImage' : `url(${imageURL})`\n        }\n        return(\n            <div className=\"article\" style={ style }>\n                <div className=\"articleText\" onClick={this.showModal}>{title}</div>\n                { this.state.modalShowing ? this.generateModal() : null}\n                { this.state.viewed ? <i className=\"viewedIcon far fa-eye\"></i> : null }\n            </div>\n        );\n    }\n}\n\nexport default NewsArticle;","import React from 'react';\nimport './App.css';\nimport NewsArticle from './components/NewsArticle/NewsArticle.js';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.markArticle = this.markArticle.bind( this );\n    this.getArticleStatus = this.getArticleStatus.bind( this );\n    this.state = {\n      data : []\n    }\n    this.prepStorage();\n  }\n  prepStorage(){\n    if(localStorage.articles === undefined ){\n      localStorage.articles = JSON.stringify({});\n    }\n  }\n  markArticle( articleURL ){\n    debugger;\n    const articleData = JSON.parse( localStorage.articles );\n    if(!articleData.hasOwnProperty( articleURL )){\n      articleData[ articleURL ] = {\n        read: Date.now(),\n      }\n    }\n    localStorage.articles = JSON.stringify( articleData );\n  }\n  getArticleStatus( articleURL ){\n    const articleData = JSON.parse( localStorage.articles );    \n    return articleData.hasOwnProperty( articleURL );\n  }\n  componentDidMount(){\n    console.log('firing');\n    var url = 'https://newsapi.org/v2/top-headlines?' +\n          'country=us&' +\n          'apiKey=5c8e21ff646c40f8af7f340cf4281975';\n    var req = new Request(url);\n    fetch(req)\n        .then( response => response.json() )\n        .then( response => \n          this.setState( {\n            data: response.articles\n          })\n        );\n  }\n  makeArticleColumn( data , index){\n    return (\n      <div className=\"articleColumn\" key={index}>\n        {data.map( articleData => \n          {\n            debugger;\n            return (<NewsArticle key={articleData.url} data={articleData} markCallback={this.markArticle} checkCallback={this.getArticleStatus}/>)\n          }\n        )}\n      </div>\n    );\n  }\n  render(){\n    const data =this.state.data;\n    const columnPoints = Math.floor(data.length/3);\n    const dataDividedByThirds = [\n      this.state.data.slice(0, columnPoints+1),\n      this.state.data.slice(columnPoints+1, columnPoints*2+1),\n      this.state.data.slice(columnPoints*2+1)\n    ];\n    return(\n      <div className=\"articleContainer\">\n        { dataDividedByThirds.map( (data, index)=> this.makeArticleColumn(data, index) )}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}